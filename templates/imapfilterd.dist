#!/bin/sh
# -----------------------------------------------------------------------------
#
#   imapfilter daemon (user@domain.tld)
#   Copyright (C) 2019, Falko Matthies
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
#
#   This file was created automatically. Do only change allowed parts
#   within this script!
#
# -----------------------------------------------------------------------------
#
### BEGIN INIT INFO
# Provides:          imapfilterd-user-domain-tld
# Required-Start:    $all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: imapfilter daemon (user@domain.tld)
# Description:       imapfilter daemon responsible for filtering mails of
#                    mail account user@domain.tld
### END INIT INFO



# -----------------------------------------------------------------------------
# Properties: Modify for your needs
# -----------------------------------------------------------------------------

CONFIG_FILE="/path/to/filter/user_domain_tld.lua"

# optional, but recommended
LOG_FILE="/path/to/log/user_domain_tld.log"

# optional
#ERROR_LOG_FILE="/path/to/log/user_domain_tld.error.log"

# a description used to display on script usage in command line
# same as "Short-Description"
DESC="imapfilter daemon (user@domain.tld)"

# a unique name used to identify the daemon
# use alphanumeric character only (no special characters, no whitespaces, etc.)
# same as "Provides"
NAME="imapfilterd-user-domain-tld"

# the default user to run this script
# if no user is set, the current root user is used
USER=""




# -----------------------------------------------------------------------------
# DO NOT MODIFY BELOW THIS LINE!
# -----------------------------------------------------------------------------

######## Script variables

# DAEMON
DAEMON="/usr/bin/imapfilter"

# ARGS
ARGS="-c ${CONFIG_FILE}"
if [ -n "${ERROR_LOG_FILE}" ]
then
    ARGS="${ARGS} -l ${ERROR_LOG_FILE}"
fi
if [ -n "${LOG_FILE}" ]
then
    ARGS="${ARGS} -d ${LOG_FILE}"
fi

# start-stop-daemon option
SSD_OPTIONS="--quiet"
if [ -n "${USER}" ] && [ "${USER}" != "0" ] && [ "${USER}" != "root" ]
then
    SSD_OPTIONS="${SSD_OPTIONS} --chuid=${USER}"
fi



######## Define functions

check_user () {
    if [ -n "${USER}" ] && [ "${USER}" != "0" ] && [ "${USER}" != "root" ]
    then
        id "${USER}" 2>&1 >/dev/null
        if [ $? -ne 0 ]
        then
            echo "Error #22: User \"${USER}\" does not exist. Please change the configured user." >&2
            exit 22
        fi
    fi
}

server_log () {
    if [ -n "${LOG_FILE}" ]
    then
        echo "$(date +[%Y-%m-%d\ %H:%M:%S%:z]) $1" >> ${LOG_FILE}
    fi
}

server_running_pids () {
    local pids=""
    for pid in $(pidof imapfilter)
    do
        cmd=$(ps -o cmd fp "${pid}" | tail -n 1)
        if [ -z "${cmd##*${CONFIG_FILE}*}" ]
        then
            pids="${pids} ${pid}"
        fi
    done
    if [ -n "${pids}" ]
    then
        pids=$(echo "${pids}"| cut -c2-)
        echo "${pids}"
    fi
}

is_running () {
    local pids_str=$(server_running_pids)
    if [ -n "${pids_str}" ]
    then
        echo "1"
    fi
}

do_start () {
    echo -n "Starting ${NAME}... "
    start-stop-daemon --start --oknodo --background ${SSD_OPTIONS} --chdir $(dirname ${CONFIG_FILE}) --exec ${DAEMON} -- ${ARGS}
    if [ $? -ne 0 ]
    then
        echo "failed"
    else
        echo "done"
    fi
}

do_stop () {
    echo -n "Stopping ${NAME}... "

    for pid in $(server_running_pids)
    do
        kill -15 ${pid} >/dev/null && wait ${pid} >/dev/null
    done

    echo "done"
}

check_command () {
    if ! which $1 >/dev/null
    then
        echo "1"
    fi
}

check_commands () {
    if [ ! -x ${DAEMON} ]
    then
        echo "Error: \"${DAEMON}\" is not installed." >&2
        exit 1
    fi
}

check_permission_log_dir () {
    if [ -n "${USER}" ] && [ "${USER}" != "0" ] && [ "${USER}" != "root" ]
    then
        if [ -n "${1}" ]
        then
            runuser -l "${USER}" -c "[ -f \"${1}\" ]"
            if [ $? -ne 0 ]
            then

                parent_dir="$(dirname ${1})"
                if [ ! -d "${parent_dir}" ]
                then
                    mkdir -p "${parent_dir}"
                fi
                touch "${1}"
                chown "${USER}":"$(id -g -n ${USER})" "${1}"
            else
                runuser -l "${USER}" -c "[ -w \"${1}\" ]"
                if [ $? -ne 0 ]
                then
                    echo "Error #2: Unable to access log file \"${1}\" Please check file permissions." >&2
                    exit 2
                fi
            fi
        fi
    fi
}

check_config_file () {
    if [ -n "${USER}" ] && [ "${USER}" != "0" ] && [ "${USER}" != "root" ]
    then
        runuser -l ${USER} -c "[ -f \"${CONFIG_FILE}\" ]"
        if [ $? -ne 0 ]
        then
            echo "Error #2: Unable to read config file \"${CONFIG_FILE}\" Please check file permissions." >&2
            exit 2
        fi
    fi
}

check_requirements () {
    check_user
    check_commands
    check_config_file
    check_permission_log_dir "${LOG_FILE}"
    check_permission_log_dir "${ERROR_LOG_FILE}"
}



########  Run statements


check_requirements

case "$1" in
	start)
		if [ -n "$(is_running)" ]
		then
			echo "${DESC} is already running"
		else
			do_start
		fi
		;;

	stop)
		if [ -n "$(is_running)" ]
		then
			do_stop
		else
			echo "Couldn't find a running ${DESC}"
		fi
		;;

	restart)
		if [ -n "$(is_running)" ]
		then
			do_stop
		else
			echo "Couldn't find a running ${DESC}"
		fi

		do_start
		;;

	status)
		[ -n "$(is_running)" ] && echo "${DESC} is UP" || echo "${DESC} is DOWN"
    	;;


	*)
		echo "Usage: $0 {start|stop|status|restart}"
		exit 1
		;;
esac

exit 0